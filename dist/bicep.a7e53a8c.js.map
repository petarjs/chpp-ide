{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/bicep/bicep.js"],"names":["bounded","text","identifierStart","identifierContinue","identifier","keywords","namedLiterals","nonCommentWs","numericLiteral","conf","comments","lineComment","blockComment","brackets","surroundingPairs","open","close","autoClosingPairs","notIn","autoCloseBefore","indentationRules","increaseIndentPattern","RegExp","decreaseIndentPattern","language","defaultToken","tokenPostfix","token","symbols","escapes","tokenizer","root","include","stringVerbatim","regex","action","next","stringLiteral","bracketCounting","comment","whitespace","expression","cases"],"mappings":"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","file":"bicep.a7e53a8c.js","sourceRoot":"..","sourcesContent":["// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nvar bounded = function (text) { return \"\\\\b\" + text + \"\\\\b\"; };\r\nvar identifierStart = '[_a-zA-Z]';\r\nvar identifierContinue = '[_a-zA-Z0-9]';\r\nvar identifier = bounded(\"\" + identifierStart + identifierContinue + \"*\");\r\nvar keywords = [\r\n    'targetScope',\r\n    'resource',\r\n    'module',\r\n    'param',\r\n    'var',\r\n    'output',\r\n    'for',\r\n    'in',\r\n    'if',\r\n    'existing'\r\n];\r\nvar namedLiterals = ['true', 'false', 'null'];\r\nvar nonCommentWs = \"[ \\\\t\\\\r\\\\n]\";\r\nvar numericLiteral = \"[0-9]+\";\r\nexport var conf = {\r\n    comments: {\r\n        lineComment: '//',\r\n        blockComment: ['/*', '*/']\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: \"'\", close: \"'\" },\r\n        { open: \"'''\", close: \"'''\" }\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: \"'\", close: \"'\", notIn: ['string', 'comment'] },\r\n        { open: \"'''\", close: \"'''\", notIn: ['string', 'comment'] }\r\n    ],\r\n    autoCloseBefore: \":.,=}])' \\n\\t\",\r\n    indentationRules: {\r\n        increaseIndentPattern: new RegExp('^((?!\\\\/\\\\/).)*(\\\\{[^}\"\\'`]*|\\\\([^)\"\\'`]*|\\\\[[^\\\\]\"\\'`]*)$'),\r\n        decreaseIndentPattern: new RegExp('^((?!.*?\\\\/\\\\*).*\\\\*/)?\\\\s*[\\\\}\\\\]].*$')\r\n    }\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.bicep',\r\n    brackets: [\r\n        { open: '{', close: '}', token: 'delimiter.curly' },\r\n        { open: '[', close: ']', token: 'delimiter.square' },\r\n        { open: '(', close: ')', token: 'delimiter.parenthesis' }\r\n    ],\r\n    symbols: /[=><!~?:&|+\\-*/^%]+/,\r\n    keywords: keywords,\r\n    namedLiterals: namedLiterals,\r\n    escapes: \"\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|'|\\\\${)\",\r\n    tokenizer: {\r\n        root: [{ include: '@expression' }, { include: '@whitespace' }],\r\n        stringVerbatim: [\r\n            { regex: \"(|'|'')[^']\", action: { token: 'string' } },\r\n            { regex: \"'''\", action: { token: 'string.quote', next: '@pop' } }\r\n        ],\r\n        stringLiteral: [\r\n            { regex: \"\\\\${\", action: { token: 'delimiter.bracket', next: '@bracketCounting' } },\r\n            { regex: \"[^\\\\\\\\'$]+\", action: { token: 'string' } },\r\n            { regex: '@escapes', action: { token: 'string.escape' } },\r\n            { regex: \"\\\\\\\\.\", action: { token: 'string.escape.invalid' } },\r\n            { regex: \"'\", action: { token: 'string', next: '@pop' } }\r\n        ],\r\n        bracketCounting: [\r\n            { regex: \"{\", action: { token: 'delimiter.bracket', next: '@bracketCounting' } },\r\n            { regex: \"}\", action: { token: 'delimiter.bracket', next: '@pop' } },\r\n            { include: 'expression' }\r\n        ],\r\n        comment: [\r\n            { regex: \"[^\\\\*]+\", action: { token: 'comment' } },\r\n            { regex: \"\\\\*\\\\/\", action: { token: 'comment', next: '@pop' } },\r\n            { regex: \"[\\\\/*]\", action: { token: 'comment' } }\r\n        ],\r\n        whitespace: [\r\n            { regex: nonCommentWs },\r\n            { regex: \"\\\\/\\\\*\", action: { token: 'comment', next: '@comment' } },\r\n            { regex: \"\\\\/\\\\/.*$\", action: { token: 'comment' } }\r\n        ],\r\n        expression: [\r\n            { regex: \"'''\", action: { token: 'string.quote', next: '@stringVerbatim' } },\r\n            { regex: \"'\", action: { token: 'string.quote', next: '@stringLiteral' } },\r\n            { regex: numericLiteral, action: { token: 'number' } },\r\n            {\r\n                regex: identifier,\r\n                action: {\r\n                    cases: {\r\n                        '@keywords': { token: 'keyword' },\r\n                        '@namedLiterals': { token: 'keyword' },\r\n                        '@default': { token: 'identifier' }\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    }\r\n};\r\n"]}