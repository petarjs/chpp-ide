{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/elixir/elixir.js"],"names":["conf","comments","lineComment","brackets","surroundingPairs","open","close","autoClosingPairs","notIn","indentationRules","increaseIndentPattern","decreaseIndentPattern","language","defaultToken","tokenPostfix","token","declarationKeywords","operatorKeywords","namespaceKeywords","otherKeywords","constants","nameBuiltin","operator","variableName","atomName","specialAtomName","aliasPart","moduleName","sigilSymmetricDelimiter","sigilStartDelimiter","sigilEndDelimiter","decimal","hex","octal","binary","escape","tokenizer","root","include","whitespace","keywordsShorthand","next","doubleQuotedStringKeyword","singleQuotedStringKeyword","numbers","identifiers","cases","unquote","strings","doubleQuotedHeredoc","singleQuotedHeredoc","doubleQuotedString","singleQuotedString","atoms","doubleQuotedStringAtom","singleQuotedStringAtom","sigils","sigil","switchTo","attributes","doubleQuotedHeredocDocstring","doubleQuotedStringDocstring","symbols","stringContentInterpol","stringContent","stringConstantContentInterpol","stringConstantContent","regexpContentInterpol","regexpContent","sigilContentInterpol","sigilContent","docstringContent","escapeChar","interpolation","interpolationContinue"],"mappings":"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","file":"elixir.86fb9a0d.js","sourceRoot":"..","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport var conf = {\r\n    comments: {\r\n        lineComment: '#'\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: \"'\", close: \"'\" },\r\n        { open: '\"', close: '\"' }\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: \"'\", close: \"'\", notIn: ['string', 'comment'] },\r\n        { open: '\"', close: '\"', notIn: ['comment'] },\r\n        { open: '\"\"\"', close: '\"\"\"' },\r\n        { open: '`', close: '`', notIn: ['string', 'comment'] },\r\n        { open: '(', close: ')' },\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '<<', close: '>>' }\r\n    ],\r\n    indentationRules: {\r\n        increaseIndentPattern: /^\\s*(after|else|catch|rescue|fn|[^#]*(do|<\\-|\\->|\\{|\\[|\\=))\\s*$/,\r\n        decreaseIndentPattern: /^\\s*((\\}|\\])\\s*$|(after|else|catch|rescue|end)\\b)/\r\n    }\r\n};\r\n/**\r\n * A Monarch lexer for the Elixir language.\r\n *\r\n * References:\r\n *\r\n * * Monarch documentation - https://microsoft.github.io/monaco-editor/monarch.html\r\n * * Elixir lexer - https://github.com/elixir-makeup/makeup_elixir/blob/master/lib/makeup/lexers/elixir_lexer.ex\r\n * * TextMate lexer (elixir-tmbundle) - https://github.com/elixir-editors/elixir-tmbundle/blob/master/Syntaxes/Elixir.tmLanguage\r\n * * TextMate lexer (vscode-elixir-ls) - https://github.com/elixir-lsp/vscode-elixir-ls/blob/master/syntaxes/elixir.json\r\n */\r\nexport var language = {\r\n    defaultToken: 'source',\r\n    tokenPostfix: '.elixir',\r\n    brackets: [\r\n        { open: '[', close: ']', token: 'delimiter.square' },\r\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\r\n        { open: '{', close: '}', token: 'delimiter.curly' },\r\n        { open: '<<', close: '>>', token: 'delimiter.angle.special' }\r\n    ],\r\n    // Below are lists/regexps to which we reference later.\r\n    declarationKeywords: [\r\n        'def',\r\n        'defp',\r\n        'defn',\r\n        'defnp',\r\n        'defguard',\r\n        'defguardp',\r\n        'defmacro',\r\n        'defmacrop',\r\n        'defdelegate',\r\n        'defcallback',\r\n        'defmacrocallback',\r\n        'defmodule',\r\n        'defprotocol',\r\n        'defexception',\r\n        'defimpl',\r\n        'defstruct'\r\n    ],\r\n    operatorKeywords: ['and', 'in', 'not', 'or', 'when'],\r\n    namespaceKeywords: ['alias', 'import', 'require', 'use'],\r\n    otherKeywords: [\r\n        'after',\r\n        'case',\r\n        'catch',\r\n        'cond',\r\n        'do',\r\n        'else',\r\n        'end',\r\n        'fn',\r\n        'for',\r\n        'if',\r\n        'quote',\r\n        'raise',\r\n        'receive',\r\n        'rescue',\r\n        'super',\r\n        'throw',\r\n        'try',\r\n        'unless',\r\n        'unquote_splicing',\r\n        'unquote',\r\n        'with'\r\n    ],\r\n    constants: ['true', 'false', 'nil'],\r\n    nameBuiltin: ['__MODULE__', '__DIR__', '__ENV__', '__CALLER__', '__STACKTRACE__'],\r\n    // Matches any of the operator names:\r\n    // <<< >>> ||| &&& ^^^ ~~~ === !== ~>> <~> |~> <|> == != <= >= && || \\\\ <> ++ -- |> =~ -> <- ~> <~ :: .. = < > + - * / | . ^ & !\r\n    operator: /-[->]?|!={0,2}|\\*|\\/|\\\\\\\\|&{1,3}|\\.\\.?|\\^(?:\\^\\^)?|\\+\\+?|<(?:-|<<|=|>|\\|>|~>?)?|=~|={1,3}|>(?:=|>>)?|\\|~>|\\|>|\\|{1,3}|~>>?|~~~|::/,\r\n    // See https://hexdocs.pm/elixir/syntax-reference.html#variables\r\n    variableName: /[a-z_][a-zA-Z0-9_]*[?!]?/,\r\n    // See https://hexdocs.pm/elixir/syntax-reference.html#atoms\r\n    atomName: /[a-zA-Z_][a-zA-Z0-9_@]*[?!]?|@specialAtomName|@operator/,\r\n    specialAtomName: /\\.\\.\\.|<<>>|%\\{\\}|%|\\{\\}/,\r\n    aliasPart: /[A-Z][a-zA-Z0-9_]*/,\r\n    moduleName: /@aliasPart(?:\\.@aliasPart)*/,\r\n    // Sigil pairs are: \"\"\" \"\"\", ''' ''', \" \", ' ', / /, | |, < >, { }, [ ], ( )\r\n    sigilSymmetricDelimiter: /\"\"\"|'''|\"|'|\\/|\\|/,\r\n    sigilStartDelimiter: /@sigilSymmetricDelimiter|<|\\{|\\[|\\(/,\r\n    sigilEndDelimiter: /@sigilSymmetricDelimiter|>|\\}|\\]|\\)/,\r\n    decimal: /\\d(?:_?\\d)*/,\r\n    hex: /[0-9a-fA-F](_?[0-9a-fA-F])*/,\r\n    octal: /[0-7](_?[0-7])*/,\r\n    binary: /[01](_?[01])*/,\r\n    // See https://hexdocs.pm/elixir/master/String.html#module-escape-characters\r\n    escape: /\\\\u[0-9a-fA-F]{4}|\\\\x[0-9a-fA-F]{2}|\\\\./,\r\n    // The keys below correspond to tokenizer states.\r\n    // We start from the root state and match against its rules\r\n    // until we explicitly transition into another state.\r\n    // The `include` simply brings in all operations from the given state\r\n    // and is useful for improving readability.\r\n    tokenizer: {\r\n        root: [\r\n            { include: '@whitespace' },\r\n            { include: '@comments' },\r\n            // Keywords start as either an identifier or a string,\r\n            // but end with a : so it's important to match this first.\r\n            { include: '@keywordsShorthand' },\r\n            { include: '@numbers' },\r\n            { include: '@identifiers' },\r\n            { include: '@strings' },\r\n            { include: '@atoms' },\r\n            { include: '@sigils' },\r\n            { include: '@attributes' },\r\n            { include: '@symbols' }\r\n        ],\r\n        // Whitespace\r\n        whitespace: [[/\\s+/, 'white']],\r\n        // Comments\r\n        comments: [[/(#)(.*)/, ['comment.punctuation', 'comment']]],\r\n        // Keyword list shorthand\r\n        keywordsShorthand: [\r\n            [/(@atomName)(:)/, ['constant', 'constant.punctuation']],\r\n            // Use positive look-ahead to ensure the string is followed by :\r\n            // and should be considered a keyword.\r\n            [\r\n                /\"(?=([^\"]|#\\{.*?\\}|\\\\\")*\":)/,\r\n                { token: 'constant.delimiter', next: '@doubleQuotedStringKeyword' }\r\n            ],\r\n            [\r\n                /'(?=([^']|#\\{.*?\\}|\\\\')*':)/,\r\n                { token: 'constant.delimiter', next: '@singleQuotedStringKeyword' }\r\n            ]\r\n        ],\r\n        doubleQuotedStringKeyword: [\r\n            [/\":/, { token: 'constant.delimiter', next: '@pop' }],\r\n            { include: '@stringConstantContentInterpol' }\r\n        ],\r\n        singleQuotedStringKeyword: [\r\n            [/':/, { token: 'constant.delimiter', next: '@pop' }],\r\n            { include: '@stringConstantContentInterpol' }\r\n        ],\r\n        // Numbers\r\n        numbers: [\r\n            [/0b@binary/, 'number.binary'],\r\n            [/0o@octal/, 'number.octal'],\r\n            [/0x@hex/, 'number.hex'],\r\n            [/@decimal\\.@decimal([eE]-?@decimal)?/, 'number.float'],\r\n            [/@decimal/, 'number']\r\n        ],\r\n        // Identifiers\r\n        identifiers: [\r\n            // Tokenize identifier name in function-like definitions.\r\n            // Note: given `def a + b, do: nil`, `a` is not a function name,\r\n            // so we use negative look-ahead to ensure there's no operator.\r\n            [\r\n                /\\b(defp?|defnp?|defmacrop?|defguardp?|defdelegate)(\\s+)(@variableName)(?!\\s+@operator)/,\r\n                [\r\n                    'keyword.declaration',\r\n                    'white',\r\n                    {\r\n                        cases: {\r\n                            unquote: 'keyword',\r\n                            '@default': 'function'\r\n                        }\r\n                    }\r\n                ]\r\n            ],\r\n            // Tokenize function calls\r\n            [\r\n                // In-scope call - an identifier followed by ( or .(\r\n                /(@variableName)(?=\\s*\\.?\\s*\\()/,\r\n                {\r\n                    cases: {\r\n                        // Tokenize as keyword in cases like `if(..., do: ..., else: ...)`\r\n                        '@declarationKeywords': 'keyword.declaration',\r\n                        '@namespaceKeywords': 'keyword',\r\n                        '@otherKeywords': 'keyword',\r\n                        '@default': 'function.call'\r\n                    }\r\n                }\r\n            ],\r\n            [\r\n                // Referencing function in a module\r\n                /(@moduleName)(\\s*)(\\.)(\\s*)(@variableName)/,\r\n                ['type.identifier', 'white', 'operator', 'white', 'function.call']\r\n            ],\r\n            [\r\n                // Referencing function in an Erlang module\r\n                /(:)(@atomName)(\\s*)(\\.)(\\s*)(@variableName)/,\r\n                ['constant.punctuation', 'constant', 'white', 'operator', 'white', 'function.call']\r\n            ],\r\n            [\r\n                // Piping into a function (tokenized separately as it may not have parentheses)\r\n                /(\\|>)(\\s*)(@variableName)/,\r\n                [\r\n                    'operator',\r\n                    'white',\r\n                    {\r\n                        cases: {\r\n                            '@otherKeywords': 'keyword',\r\n                            '@default': 'function.call'\r\n                        }\r\n                    }\r\n                ]\r\n            ],\r\n            [\r\n                // Function reference passed to another function\r\n                /(&)(\\s*)(@variableName)/,\r\n                ['operator', 'white', 'function.call']\r\n            ],\r\n            // Language keywords, builtins, constants and variables\r\n            [\r\n                /@variableName/,\r\n                {\r\n                    cases: {\r\n                        '@declarationKeywords': 'keyword.declaration',\r\n                        '@operatorKeywords': 'keyword.operator',\r\n                        '@namespaceKeywords': 'keyword',\r\n                        '@otherKeywords': 'keyword',\r\n                        '@constants': 'constant.language',\r\n                        '@nameBuiltin': 'variable.language',\r\n                        '_.*': 'comment.unused',\r\n                        '@default': 'identifier'\r\n                    }\r\n                }\r\n            ],\r\n            // Module names\r\n            [/@moduleName/, 'type.identifier']\r\n        ],\r\n        // Strings\r\n        strings: [\r\n            [/\"\"\"/, { token: 'string.delimiter', next: '@doubleQuotedHeredoc' }],\r\n            [/'''/, { token: 'string.delimiter', next: '@singleQuotedHeredoc' }],\r\n            [/\"/, { token: 'string.delimiter', next: '@doubleQuotedString' }],\r\n            [/'/, { token: 'string.delimiter', next: '@singleQuotedString' }]\r\n        ],\r\n        doubleQuotedHeredoc: [\r\n            [/\"\"\"/, { token: 'string.delimiter', next: '@pop' }],\r\n            { include: '@stringContentInterpol' }\r\n        ],\r\n        singleQuotedHeredoc: [\r\n            [/'''/, { token: 'string.delimiter', next: '@pop' }],\r\n            { include: '@stringContentInterpol' }\r\n        ],\r\n        doubleQuotedString: [\r\n            [/\"/, { token: 'string.delimiter', next: '@pop' }],\r\n            { include: '@stringContentInterpol' }\r\n        ],\r\n        singleQuotedString: [\r\n            [/'/, { token: 'string.delimiter', next: '@pop' }],\r\n            { include: '@stringContentInterpol' }\r\n        ],\r\n        // Atoms\r\n        atoms: [\r\n            [/(:)(@atomName)/, ['constant.punctuation', 'constant']],\r\n            [/:\"/, { token: 'constant.delimiter', next: '@doubleQuotedStringAtom' }],\r\n            [/:'/, { token: 'constant.delimiter', next: '@singleQuotedStringAtom' }]\r\n        ],\r\n        doubleQuotedStringAtom: [\r\n            [/\"/, { token: 'constant.delimiter', next: '@pop' }],\r\n            { include: '@stringConstantContentInterpol' }\r\n        ],\r\n        singleQuotedStringAtom: [\r\n            [/'/, { token: 'constant.delimiter', next: '@pop' }],\r\n            { include: '@stringConstantContentInterpol' }\r\n        ],\r\n        // Sigils\r\n        // See https://elixir-lang.org/getting-started/sigils.html\r\n        // Sigils allow for typing values using their textual representation.\r\n        // All sigils start with ~ followed by a letter indicating sigil type\r\n        // and then a delimiter pair enclosing the textual representation.\r\n        // Optional modifiers are allowed after the closing delimiter.\r\n        // For instance a regular expressions can be written as:\r\n        // ~r/foo|bar/ ~r{foo|bar} ~r/foo|bar/g\r\n        //\r\n        // In general lowercase sigils allow for interpolation\r\n        // and escaped characters, whereas uppercase sigils don't\r\n        //\r\n        // During tokenization we want to distinguish some\r\n        // specific sigil types, namely string and regexp,\r\n        // so that they cen be themed separately.\r\n        //\r\n        // To reasonably handle all those combinations we leverage\r\n        // dot-separated states, so if we transition to @sigilStart.interpol.s.{.}\r\n        // then \"sigilStart.interpol.s\" state will match and also all\r\n        // the individual dot-separated parameters can be accessed.\r\n        sigils: [\r\n            [/~[a-z]@sigilStartDelimiter/, { token: '@rematch', next: '@sigil.interpol' }],\r\n            [/~[A-Z]@sigilStartDelimiter/, { token: '@rematch', next: '@sigil.noInterpol' }]\r\n        ],\r\n        sigil: [\r\n            [/~([a-zA-Z])\\{/, { token: '@rematch', switchTo: '@sigilStart.$S2.$1.{.}' }],\r\n            [/~([a-zA-Z])\\[/, { token: '@rematch', switchTo: '@sigilStart.$S2.$1.[.]' }],\r\n            [/~([a-zA-Z])\\(/, { token: '@rematch', switchTo: '@sigilStart.$S2.$1.(.)' }],\r\n            [/~([a-zA-Z])\\</, { token: '@rematch', switchTo: '@sigilStart.$S2.$1.<.>' }],\r\n            [\r\n                /~([a-zA-Z])(@sigilSymmetricDelimiter)/,\r\n                { token: '@rematch', switchTo: '@sigilStart.$S2.$1.$2.$2' }\r\n            ]\r\n        ],\r\n        // The definitions below expect states to be of the form:\r\n        //\r\n        // sigilStart.<interpol-or-noInterpol>.<sigil-letter>.<start-delimiter>.<end-delimiter>\r\n        // sigilContinue.<interpol-or-noInterpol>.<sigil-letter>.<start-delimiter>.<end-delimiter>\r\n        //\r\n        // The sigilStart state is used only to properly classify the token (as string/regex/sigil)\r\n        // and immediately switches to the sigilContinue sate, which handles the actual content\r\n        // and waits for the corresponding end delimiter.\r\n        'sigilStart.interpol.s': [\r\n            [\r\n                /~s@sigilStartDelimiter/,\r\n                {\r\n                    token: 'string.delimiter',\r\n                    switchTo: '@sigilContinue.$S2.$S3.$S4.$S5'\r\n                }\r\n            ]\r\n        ],\r\n        'sigilContinue.interpol.s': [\r\n            [\r\n                /(@sigilEndDelimiter)[a-zA-Z]*/,\r\n                {\r\n                    cases: {\r\n                        '$1==$S5': { token: 'string.delimiter', next: '@pop' },\r\n                        '@default': 'string'\r\n                    }\r\n                }\r\n            ],\r\n            { include: '@stringContentInterpol' }\r\n        ],\r\n        'sigilStart.noInterpol.S': [\r\n            [\r\n                /~S@sigilStartDelimiter/,\r\n                {\r\n                    token: 'string.delimiter',\r\n                    switchTo: '@sigilContinue.$S2.$S3.$S4.$S5'\r\n                }\r\n            ]\r\n        ],\r\n        'sigilContinue.noInterpol.S': [\r\n            // Ignore escaped sigil end\r\n            [/(^|[^\\\\])\\\\@sigilEndDelimiter/, 'string'],\r\n            [\r\n                /(@sigilEndDelimiter)[a-zA-Z]*/,\r\n                {\r\n                    cases: {\r\n                        '$1==$S5': { token: 'string.delimiter', next: '@pop' },\r\n                        '@default': 'string'\r\n                    }\r\n                }\r\n            ],\r\n            { include: '@stringContent' }\r\n        ],\r\n        'sigilStart.interpol.r': [\r\n            [\r\n                /~r@sigilStartDelimiter/,\r\n                {\r\n                    token: 'regexp.delimiter',\r\n                    switchTo: '@sigilContinue.$S2.$S3.$S4.$S5'\r\n                }\r\n            ]\r\n        ],\r\n        'sigilContinue.interpol.r': [\r\n            [\r\n                /(@sigilEndDelimiter)[a-zA-Z]*/,\r\n                {\r\n                    cases: {\r\n                        '$1==$S5': { token: 'regexp.delimiter', next: '@pop' },\r\n                        '@default': 'regexp'\r\n                    }\r\n                }\r\n            ],\r\n            { include: '@regexpContentInterpol' }\r\n        ],\r\n        'sigilStart.noInterpol.R': [\r\n            [\r\n                /~R@sigilStartDelimiter/,\r\n                {\r\n                    token: 'regexp.delimiter',\r\n                    switchTo: '@sigilContinue.$S2.$S3.$S4.$S5'\r\n                }\r\n            ]\r\n        ],\r\n        'sigilContinue.noInterpol.R': [\r\n            // Ignore escaped sigil end\r\n            [/(^|[^\\\\])\\\\@sigilEndDelimiter/, 'regexp'],\r\n            [\r\n                /(@sigilEndDelimiter)[a-zA-Z]*/,\r\n                {\r\n                    cases: {\r\n                        '$1==$S5': { token: 'regexp.delimiter', next: '@pop' },\r\n                        '@default': 'regexp'\r\n                    }\r\n                }\r\n            ],\r\n            { include: '@regexpContent' }\r\n        ],\r\n        // Fallback to the generic sigil by default\r\n        'sigilStart.interpol': [\r\n            [\r\n                /~([a-zA-Z])@sigilStartDelimiter/,\r\n                {\r\n                    token: 'sigil.delimiter',\r\n                    switchTo: '@sigilContinue.$S2.$S3.$S4.$S5'\r\n                }\r\n            ]\r\n        ],\r\n        'sigilContinue.interpol': [\r\n            [\r\n                /(@sigilEndDelimiter)[a-zA-Z]*/,\r\n                {\r\n                    cases: {\r\n                        '$1==$S5': { token: 'sigil.delimiter', next: '@pop' },\r\n                        '@default': 'sigil'\r\n                    }\r\n                }\r\n            ],\r\n            { include: '@sigilContentInterpol' }\r\n        ],\r\n        'sigilStart.noInterpol': [\r\n            [\r\n                /~([a-zA-Z])@sigilStartDelimiter/,\r\n                {\r\n                    token: 'sigil.delimiter',\r\n                    switchTo: '@sigilContinue.$S2.$S3.$S4.$S5'\r\n                }\r\n            ]\r\n        ],\r\n        'sigilContinue.noInterpol': [\r\n            // Ignore escaped sigil end\r\n            [/(^|[^\\\\])\\\\@sigilEndDelimiter/, 'sigil'],\r\n            [\r\n                /(@sigilEndDelimiter)[a-zA-Z]*/,\r\n                {\r\n                    cases: {\r\n                        '$1==$S5': { token: 'sigil.delimiter', next: '@pop' },\r\n                        '@default': 'sigil'\r\n                    }\r\n                }\r\n            ],\r\n            { include: '@sigilContent' }\r\n        ],\r\n        // Attributes\r\n        attributes: [\r\n            // Module @doc* attributes - tokenized as comments\r\n            [\r\n                /\\@(module|type)?doc (~[sS])?\"\"\"/,\r\n                {\r\n                    token: 'comment.block.documentation',\r\n                    next: '@doubleQuotedHeredocDocstring'\r\n                }\r\n            ],\r\n            [\r\n                /\\@(module|type)?doc (~[sS])?\"/,\r\n                {\r\n                    token: 'comment.block.documentation',\r\n                    next: '@doubleQuotedStringDocstring'\r\n                }\r\n            ],\r\n            [/\\@(module|type)?doc false/, 'comment.block.documentation'],\r\n            // Module attributes\r\n            [/\\@(@variableName)/, 'variable']\r\n        ],\r\n        doubleQuotedHeredocDocstring: [\r\n            [/\"\"\"/, { token: 'comment.block.documentation', next: '@pop' }],\r\n            { include: '@docstringContent' }\r\n        ],\r\n        doubleQuotedStringDocstring: [\r\n            [/\"/, { token: 'comment.block.documentation', next: '@pop' }],\r\n            { include: '@docstringContent' }\r\n        ],\r\n        // Operators, punctuation, brackets\r\n        symbols: [\r\n            // Code point operator (either with regular character ?a or an escaped one ?\\n)\r\n            [/\\?(\\\\.|[^\\\\\\s])/, 'number.constant'],\r\n            // Anonymous function arguments\r\n            [/&\\d+/, 'operator'],\r\n            // Bitshift operators (must go before delimiters, so that << >> don't match first)\r\n            [/<<<|>>>/, 'operator'],\r\n            // Delimiter pairs\r\n            [/[()\\[\\]\\{\\}]|<<|>>/, '@brackets'],\r\n            // Triple dot is a valid name (must go before operators, so that .. doesn't match instead)\r\n            [/\\.\\.\\./, 'identifier'],\r\n            // Punctuation => (must go before operators, so it's not tokenized as = then >)\r\n            [/=>/, 'punctuation'],\r\n            // Operators\r\n            [/@operator/, 'operator'],\r\n            // Punctuation\r\n            [/[:;,.%]/, 'punctuation']\r\n        ],\r\n        // Generic helpers\r\n        stringContentInterpol: [\r\n            { include: '@interpolation' },\r\n            { include: '@escapeChar' },\r\n            { include: '@stringContent' }\r\n        ],\r\n        stringContent: [[/./, 'string']],\r\n        stringConstantContentInterpol: [\r\n            { include: '@interpolation' },\r\n            { include: '@escapeChar' },\r\n            { include: '@stringConstantContent' }\r\n        ],\r\n        stringConstantContent: [[/./, 'constant']],\r\n        regexpContentInterpol: [\r\n            { include: '@interpolation' },\r\n            { include: '@escapeChar' },\r\n            { include: '@regexpContent' }\r\n        ],\r\n        regexpContent: [\r\n            // # may be a regular regexp char, so we use a heuristic\r\n            // assuming a # surrounded by whitespace is actually a comment.\r\n            [/(\\s)(#)(\\s.*)$/, ['white', 'comment.punctuation', 'comment']],\r\n            [/./, 'regexp']\r\n        ],\r\n        sigilContentInterpol: [\r\n            { include: '@interpolation' },\r\n            { include: '@escapeChar' },\r\n            { include: '@sigilContent' }\r\n        ],\r\n        sigilContent: [[/./, 'sigil']],\r\n        docstringContent: [[/./, 'comment.block.documentation']],\r\n        escapeChar: [[/@escape/, 'constant.character.escape']],\r\n        interpolation: [\r\n            [/#{/, { token: 'delimiter.bracket.embed', next: '@interpolationContinue' }]\r\n        ],\r\n        interpolationContinue: [\r\n            [/}/, { token: 'delimiter.bracket.embed', next: '@pop' }],\r\n            // Interpolation brackets may contain arbitrary code,\r\n            // so we simply match against all the root rules,\r\n            // until we reach interpolation end (the above matches).\r\n            { include: '@root' }\r\n        ]\r\n    }\r\n};\r\n"]}