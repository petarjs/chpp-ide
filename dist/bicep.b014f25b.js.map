{"mappings":"wXAEA,IAGIA,QAAoB,yBAH2B,MAmBxCC,EAAI,CACXC,SAAQ,CACJC,YAAW,KACXC,aAAY,aAEhBC,SAAQ,gCAKRC,iBAAgB,EACVC,KAAI,IAAOC,MAAK,MAChBD,KAAI,IAAOC,MAAK,MAChBD,KAAI,IAAOC,MAAK,MAChBD,KAAI,IAAOC,MAAK,MAChBD,KAAI,MAASC,MAAK,QAExBC,iBAAgB,EACVF,KAAI,IAAOC,MAAK,MAChBD,KAAI,IAAOC,MAAK,MAChBD,KAAI,IAAOC,MAAK,MAChBD,KAAI,IAAOC,MAAK,IAAOE,MAAK,uBAC5BH,KAAI,MAASC,MAAK,MAASE,MAAK,uBAEtCC,gBAAe,gBACfC,iBAAgB,CACZC,sBAAuB,IAAIC,OAAM,8DACjCC,sBAAuB,IAAID,OAAM,4CAG9BE,EAAQ,CACfC,aAAY,GACZC,aAAY,SACZb,SAAQ,EACFE,KAAI,IAAOC,MAAK,IAAOW,MAAK,oBAC5BZ,KAAI,IAAOC,MAAK,IAAOW,MAAK,qBAC5BZ,KAAI,IAAOC,MAAK,IAAOW,MAAK,0BAElCC,QAAO,sBACPC,SAtDQ,sFAuDRC,cA3Ca,wBA4CbC,QAAO,0CACPC,UAAS,CACLC,KAAI,EAAKC,QAAO,gBAAqBA,QAAO,gBAC5CC,eAAc,EACRC,MAAK,cAAiBC,OAAM,CAAIV,MAAK,YACrCS,MAAK,MAASC,OAAM,CAAIV,MAAK,eAAkBW,KAAI,UAEzDC,cAAa,EACPH,MAAK,OAAUC,OAAM,CAAIV,MAAK,oBAAuBW,KAAI,sBACzDF,MAAK,aAAgBC,OAAM,CAAIV,MAAK,YACpCS,MAAK,WAAcC,OAAM,CAAIV,MAAK,mBAClCS,MAAK,QAAWC,OAAM,CAAIV,MAAK,2BAC/BS,MAAK,IAAOC,OAAM,CAAIV,MAAK,SAAYW,KAAI,UAEjDE,gBAAe,EACTJ,MAAK,IAAOC,OAAM,CAAIV,MAAK,oBAAuBW,KAAI,sBACtDF,MAAK,IAAOC,OAAM,CAAIV,MAAK,oBAAuBW,KAAI,UACtDJ,QAAO,eAEbO,QAAO,EACDL,MAAK,UAAaC,OAAM,CAAIV,MAAK,aACjCS,MAAK,SAAYC,OAAM,CAAIV,MAAK,UAAaW,KAAI,UACjDF,MAAK,SAAYC,OAAM,CAAIV,MAAK,aAEtCe,WAAU,EACJN,MApEE,iBAqEFA,MAAK,SAAYC,OAAM,CAAIV,MAAK,UAAaW,KAAI,cACjDF,MAAK,YAAeC,OAAM,CAAIV,MAAK,aAEzCgB,WAAU,EACJP,MAAK,MAASC,OAAM,CAAIV,MAAK,eAAkBW,KAAI,qBACnDF,MAAK,IAAOC,OAAM,CAAIV,MAAK,eAAkBW,KAAI,oBACjDF,MA1EI,SA0EmBC,OAAM,CAAIV,MAAK,YAEpCS,MAAO5B,EACP6B,OAAM,CACFO,MAAK,aACU,CAAIjB,MAAK,4BACJ,CAAIA,MAAK,sBACf,CAAIA,MAAK","sources":["node_modules/monaco-editor/esm/vs/basic-languages/bicep/bicep.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nvar bounded = function (text) { return \"\\\\b\" + text + \"\\\\b\"; };\r\nvar identifierStart = '[_a-zA-Z]';\r\nvar identifierContinue = '[_a-zA-Z0-9]';\r\nvar identifier = bounded(\"\" + identifierStart + identifierContinue + \"*\");\r\nvar keywords = [\r\n    'targetScope',\r\n    'resource',\r\n    'module',\r\n    'param',\r\n    'var',\r\n    'output',\r\n    'for',\r\n    'in',\r\n    'if',\r\n    'existing'\r\n];\r\nvar namedLiterals = ['true', 'false', 'null'];\r\nvar nonCommentWs = \"[ \\\\t\\\\r\\\\n]\";\r\nvar numericLiteral = \"[0-9]+\";\r\nexport var conf = {\r\n    comments: {\r\n        lineComment: '//',\r\n        blockComment: ['/*', '*/']\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: \"'\", close: \"'\" },\r\n        { open: \"'''\", close: \"'''\" }\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: \"'\", close: \"'\", notIn: ['string', 'comment'] },\r\n        { open: \"'''\", close: \"'''\", notIn: ['string', 'comment'] }\r\n    ],\r\n    autoCloseBefore: \":.,=}])' \\n\\t\",\r\n    indentationRules: {\r\n        increaseIndentPattern: new RegExp('^((?!\\\\/\\\\/).)*(\\\\{[^}\"\\'`]*|\\\\([^)\"\\'`]*|\\\\[[^\\\\]\"\\'`]*)$'),\r\n        decreaseIndentPattern: new RegExp('^((?!.*?\\\\/\\\\*).*\\\\*/)?\\\\s*[\\\\}\\\\]].*$')\r\n    }\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.bicep',\r\n    brackets: [\r\n        { open: '{', close: '}', token: 'delimiter.curly' },\r\n        { open: '[', close: ']', token: 'delimiter.square' },\r\n        { open: '(', close: ')', token: 'delimiter.parenthesis' }\r\n    ],\r\n    symbols: /[=><!~?:&|+\\-*/^%]+/,\r\n    keywords: keywords,\r\n    namedLiterals: namedLiterals,\r\n    escapes: \"\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|'|\\\\${)\",\r\n    tokenizer: {\r\n        root: [{ include: '@expression' }, { include: '@whitespace' }],\r\n        stringVerbatim: [\r\n            { regex: \"(|'|'')[^']\", action: { token: 'string' } },\r\n            { regex: \"'''\", action: { token: 'string.quote', next: '@pop' } }\r\n        ],\r\n        stringLiteral: [\r\n            { regex: \"\\\\${\", action: { token: 'delimiter.bracket', next: '@bracketCounting' } },\r\n            { regex: \"[^\\\\\\\\'$]+\", action: { token: 'string' } },\r\n            { regex: '@escapes', action: { token: 'string.escape' } },\r\n            { regex: \"\\\\\\\\.\", action: { token: 'string.escape.invalid' } },\r\n            { regex: \"'\", action: { token: 'string', next: '@pop' } }\r\n        ],\r\n        bracketCounting: [\r\n            { regex: \"{\", action: { token: 'delimiter.bracket', next: '@bracketCounting' } },\r\n            { regex: \"}\", action: { token: 'delimiter.bracket', next: '@pop' } },\r\n            { include: 'expression' }\r\n        ],\r\n        comment: [\r\n            { regex: \"[^\\\\*]+\", action: { token: 'comment' } },\r\n            { regex: \"\\\\*\\\\/\", action: { token: 'comment', next: '@pop' } },\r\n            { regex: \"[\\\\/*]\", action: { token: 'comment' } }\r\n        ],\r\n        whitespace: [\r\n            { regex: nonCommentWs },\r\n            { regex: \"\\\\/\\\\*\", action: { token: 'comment', next: '@comment' } },\r\n            { regex: \"\\\\/\\\\/.*$\", action: { token: 'comment' } }\r\n        ],\r\n        expression: [\r\n            { regex: \"'''\", action: { token: 'string.quote', next: '@stringVerbatim' } },\r\n            { regex: \"'\", action: { token: 'string.quote', next: '@stringLiteral' } },\r\n            { regex: numericLiteral, action: { token: 'number' } },\r\n            {\r\n                regex: identifier,\r\n                action: {\r\n                    cases: {\r\n                        '@keywords': { token: 'keyword' },\r\n                        '@namedLiterals': { token: 'keyword' },\r\n                        '@default': { token: 'identifier' }\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    }\r\n};\r\n"],"names":["$af19cd5faba300fd$var$identifier","$af19cd5faba300fd$export$5056e7a493e30728","comments","lineComment","blockComment","brackets","surroundingPairs","open","close","autoClosingPairs","notIn","autoCloseBefore","indentationRules","increaseIndentPattern","RegExp","decreaseIndentPattern","$af19cd5faba300fd$export$2b7f034382a4a3d1","defaultToken","tokenPostfix","token","symbols","keywords","namedLiterals","escapes","tokenizer","root","include","stringVerbatim","regex","action","next","stringLiteral","bracketCounting","comment","whitespace","expression","cases"],"version":3,"file":"bicep.b014f25b.js.map"}