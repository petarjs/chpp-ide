{"mappings":"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","sources":["node_modules/monaco-editor/esm/vs/basic-languages/scss/scss.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport var conf = {\r\n    wordPattern: /(#?-?\\d*\\.\\d\\w*%?)|([@$#!.:]?[\\w-?]+%?)|[@#!.]/g,\r\n    comments: {\r\n        blockComment: ['/*', '*/'],\r\n        lineComment: '//'\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}', notIn: ['string', 'comment'] },\r\n        { open: '[', close: ']', notIn: ['string', 'comment'] },\r\n        { open: '(', close: ')', notIn: ['string', 'comment'] },\r\n        { open: '\"', close: '\"', notIn: ['string', 'comment'] },\r\n        { open: \"'\", close: \"'\", notIn: ['string', 'comment'] }\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: \"'\", close: \"'\" }\r\n    ],\r\n    folding: {\r\n        markers: {\r\n            start: new RegExp('^\\\\s*\\\\/\\\\*\\\\s*#region\\\\b\\\\s*(.*?)\\\\s*\\\\*\\\\/'),\r\n            end: new RegExp('^\\\\s*\\\\/\\\\*\\\\s*#endregion\\\\b.*\\\\*\\\\/')\r\n        }\r\n    }\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.scss',\r\n    ws: '[ \\t\\n\\r\\f]*',\r\n    identifier: '-?-?([a-zA-Z]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))([\\\\w\\\\-]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))*',\r\n    brackets: [\r\n        { open: '{', close: '}', token: 'delimiter.curly' },\r\n        { open: '[', close: ']', token: 'delimiter.bracket' },\r\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\r\n        { open: '<', close: '>', token: 'delimiter.angle' }\r\n    ],\r\n    tokenizer: {\r\n        root: [{ include: '@selector' }],\r\n        selector: [\r\n            { include: '@comments' },\r\n            { include: '@import' },\r\n            { include: '@variabledeclaration' },\r\n            { include: '@warndebug' },\r\n            ['[@](include)', { token: 'keyword', next: '@includedeclaration' }],\r\n            [\r\n                '[@](keyframes|-webkit-keyframes|-moz-keyframes|-o-keyframes)',\r\n                { token: 'keyword', next: '@keyframedeclaration' }\r\n            ],\r\n            ['[@](page|content|font-face|-moz-document)', { token: 'keyword' }],\r\n            ['[@](charset|namespace)', { token: 'keyword', next: '@declarationbody' }],\r\n            ['[@](function)', { token: 'keyword', next: '@functiondeclaration' }],\r\n            ['[@](mixin)', { token: 'keyword', next: '@mixindeclaration' }],\r\n            ['url(\\\\-prefix)?\\\\(', { token: 'meta', next: '@urldeclaration' }],\r\n            { include: '@controlstatement' },\r\n            { include: '@selectorname' },\r\n            ['[&\\\\*]', 'tag'],\r\n            ['[>\\\\+,]', 'delimiter'],\r\n            ['\\\\[', { token: 'delimiter.bracket', next: '@selectorattribute' }],\r\n            ['{', { token: 'delimiter.curly', next: '@selectorbody' }]\r\n        ],\r\n        selectorbody: [\r\n            ['[*_]?@identifier@ws:(?=(\\\\s|\\\\d|[^{;}]*[;}]))', 'attribute.name', '@rulevalue'],\r\n            { include: '@selector' },\r\n            ['[@](extend)', { token: 'keyword', next: '@extendbody' }],\r\n            ['[@](return)', { token: 'keyword', next: '@declarationbody' }],\r\n            ['}', { token: 'delimiter.curly', next: '@pop' }]\r\n        ],\r\n        selectorname: [\r\n            ['#{', { token: 'meta', next: '@variableinterpolation' }],\r\n            ['(\\\\.|#(?=[^{])|%|(@identifier)|:)+', 'tag'] // selector (.foo, div, ...)\r\n        ],\r\n        selectorattribute: [\r\n            { include: '@term' },\r\n            [']', { token: 'delimiter.bracket', next: '@pop' }]\r\n        ],\r\n        term: [\r\n            { include: '@comments' },\r\n            ['url(\\\\-prefix)?\\\\(', { token: 'meta', next: '@urldeclaration' }],\r\n            { include: '@functioninvocation' },\r\n            { include: '@numbers' },\r\n            { include: '@strings' },\r\n            { include: '@variablereference' },\r\n            ['(and\\\\b|or\\\\b|not\\\\b)', 'operator'],\r\n            { include: '@name' },\r\n            ['([<>=\\\\+\\\\-\\\\*\\\\/\\\\^\\\\|\\\\~,])', 'operator'],\r\n            [',', 'delimiter'],\r\n            ['!default', 'literal'],\r\n            ['\\\\(', { token: 'delimiter.parenthesis', next: '@parenthizedterm' }]\r\n        ],\r\n        rulevalue: [\r\n            { include: '@term' },\r\n            ['!important', 'literal'],\r\n            [';', 'delimiter', '@pop'],\r\n            ['{', { token: 'delimiter.curly', switchTo: '@nestedproperty' }],\r\n            ['(?=})', { token: '', next: '@pop' }] // missing semicolon\r\n        ],\r\n        nestedproperty: [\r\n            ['[*_]?@identifier@ws:', 'attribute.name', '@rulevalue'],\r\n            { include: '@comments' },\r\n            ['}', { token: 'delimiter.curly', next: '@pop' }]\r\n        ],\r\n        warndebug: [['[@](warn|debug)', { token: 'keyword', next: '@declarationbody' }]],\r\n        import: [['[@](import)', { token: 'keyword', next: '@declarationbody' }]],\r\n        variabledeclaration: [\r\n            // sass variables\r\n            ['\\\\$@identifier@ws:', 'variable.decl', '@declarationbody']\r\n        ],\r\n        urldeclaration: [\r\n            { include: '@strings' },\r\n            ['[^)\\r\\n]+', 'string'],\r\n            ['\\\\)', { token: 'meta', next: '@pop' }]\r\n        ],\r\n        parenthizedterm: [\r\n            { include: '@term' },\r\n            ['\\\\)', { token: 'delimiter.parenthesis', next: '@pop' }]\r\n        ],\r\n        declarationbody: [\r\n            { include: '@term' },\r\n            [';', 'delimiter', '@pop'],\r\n            ['(?=})', { token: '', next: '@pop' }] // missing semicolon\r\n        ],\r\n        extendbody: [\r\n            { include: '@selectorname' },\r\n            ['!optional', 'literal'],\r\n            [';', 'delimiter', '@pop'],\r\n            ['(?=})', { token: '', next: '@pop' }] // missing semicolon\r\n        ],\r\n        variablereference: [\r\n            // sass variable reference\r\n            ['\\\\$@identifier', 'variable.ref'],\r\n            ['\\\\.\\\\.\\\\.', 'operator'],\r\n            ['#{', { token: 'meta', next: '@variableinterpolation' }] // sass var resolve\r\n        ],\r\n        variableinterpolation: [\r\n            { include: '@variablereference' },\r\n            ['}', { token: 'meta', next: '@pop' }]\r\n        ],\r\n        comments: [\r\n            ['\\\\/\\\\*', 'comment', '@comment'],\r\n            ['\\\\/\\\\/+.*', 'comment']\r\n        ],\r\n        comment: [\r\n            ['\\\\*\\\\/', 'comment', '@pop'],\r\n            ['.', 'comment']\r\n        ],\r\n        name: [['@identifier', 'attribute.value']],\r\n        numbers: [\r\n            ['(\\\\d*\\\\.)?\\\\d+([eE][\\\\-+]?\\\\d+)?', { token: 'number', next: '@units' }],\r\n            ['#[0-9a-fA-F_]+(?!\\\\w)', 'number.hex']\r\n        ],\r\n        units: [\r\n            [\r\n                '(em|ex|ch|rem|vmin|vmax|vw|vh|vm|cm|mm|in|px|pt|pc|deg|grad|rad|turn|s|ms|Hz|kHz|%)?',\r\n                'number',\r\n                '@pop'\r\n            ]\r\n        ],\r\n        functiondeclaration: [\r\n            ['@identifier@ws\\\\(', { token: 'meta', next: '@parameterdeclaration' }],\r\n            ['{', { token: 'delimiter.curly', switchTo: '@functionbody' }]\r\n        ],\r\n        mixindeclaration: [\r\n            // mixin with parameters\r\n            ['@identifier@ws\\\\(', { token: 'meta', next: '@parameterdeclaration' }],\r\n            // mixin without parameters\r\n            ['@identifier', 'meta'],\r\n            ['{', { token: 'delimiter.curly', switchTo: '@selectorbody' }]\r\n        ],\r\n        parameterdeclaration: [\r\n            ['\\\\$@identifier@ws:', 'variable.decl'],\r\n            ['\\\\.\\\\.\\\\.', 'operator'],\r\n            [',', 'delimiter'],\r\n            { include: '@term' },\r\n            ['\\\\)', { token: 'meta', next: '@pop' }]\r\n        ],\r\n        includedeclaration: [\r\n            { include: '@functioninvocation' },\r\n            ['@identifier', 'meta'],\r\n            [';', 'delimiter', '@pop'],\r\n            ['(?=})', { token: '', next: '@pop' }],\r\n            ['{', { token: 'delimiter.curly', switchTo: '@selectorbody' }]\r\n        ],\r\n        keyframedeclaration: [\r\n            ['@identifier', 'meta'],\r\n            ['{', { token: 'delimiter.curly', switchTo: '@keyframebody' }]\r\n        ],\r\n        keyframebody: [\r\n            { include: '@term' },\r\n            ['{', { token: 'delimiter.curly', next: '@selectorbody' }],\r\n            ['}', { token: 'delimiter.curly', next: '@pop' }]\r\n        ],\r\n        controlstatement: [\r\n            [\r\n                '[@](if|else|for|while|each|media)',\r\n                { token: 'keyword.flow', next: '@controlstatementdeclaration' }\r\n            ]\r\n        ],\r\n        controlstatementdeclaration: [\r\n            ['(in|from|through|if|to)\\\\b', { token: 'keyword.flow' }],\r\n            { include: '@term' },\r\n            ['{', { token: 'delimiter.curly', switchTo: '@selectorbody' }]\r\n        ],\r\n        functionbody: [\r\n            ['[@](return)', { token: 'keyword' }],\r\n            { include: '@variabledeclaration' },\r\n            { include: '@term' },\r\n            { include: '@controlstatement' },\r\n            [';', 'delimiter'],\r\n            ['}', { token: 'delimiter.curly', next: '@pop' }]\r\n        ],\r\n        functioninvocation: [['@identifier\\\\(', { token: 'meta', next: '@functionarguments' }]],\r\n        functionarguments: [\r\n            ['\\\\$@identifier@ws:', 'attribute.name'],\r\n            ['[,]', 'delimiter'],\r\n            { include: '@term' },\r\n            ['\\\\)', { token: 'meta', next: '@pop' }]\r\n        ],\r\n        strings: [\r\n            ['~?\"', { token: 'string.delimiter', next: '@stringenddoublequote' }],\r\n            [\"~?'\", { token: 'string.delimiter', next: '@stringendquote' }]\r\n        ],\r\n        stringenddoublequote: [\r\n            ['\\\\\\\\.', 'string'],\r\n            ['\"', { token: 'string.delimiter', next: '@pop' }],\r\n            ['.', 'string']\r\n        ],\r\n        stringendquote: [\r\n            ['\\\\\\\\.', 'string'],\r\n            [\"'\", { token: 'string.delimiter', next: '@pop' }],\r\n            ['.', 'string']\r\n        ]\r\n    }\r\n};\r\n"],"names":["$cd3a5a9cd085491f$export$5056e7a493e30728","wordPattern","comments","blockComment","lineComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","markers","start","RegExp","end","$cd3a5a9cd085491f$export$2b7f034382a4a3d1","defaultToken","tokenPostfix","ws","identifier","token","tokenizer","root","include","selector","next","selectorbody","selectorname","selectorattribute","term","rulevalue","switchTo","nestedproperty","warndebug","import","variabledeclaration","urldeclaration","parenthizedterm","declarationbody","extendbody","variablereference","variableinterpolation","comment","name","numbers","units","functiondeclaration","mixindeclaration","parameterdeclaration","includedeclaration","keyframedeclaration","keyframebody","controlstatement","controlstatementdeclaration","functionbody","functioninvocation","functionarguments","strings","stringenddoublequote","stringendquote"],"version":3,"file":"scss.170d3309.js.map"}