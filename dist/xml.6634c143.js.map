{"mappings":"iZAKWA,EAAI,CACXC,SAAQ,CACJC,aAAY,sBAEhBC,SAAQ,YACRC,iBAAgB,EACVC,KAAI,IAAOC,MAAK,MAChBD,KAAI,IAAOC,MAAK,MAChBD,KAAI,IAAOC,MAAK,MAEtBC,iBAAgB,EACVF,KAAI,IAAOC,MAAK,MAChBD,KAAI,IAAOC,MAAK,MAChBD,KAAI,IAAOC,MAAK,MAEtBE,aAAY,EAEJC,WAAY,IAAIC,OAAM,8CAA8C,KACpEC,UAAS,gCACTC,OAAM,CACFC,aAAcC,EAAAC,UAAUC,aAAaC,iBAIzCR,WAAY,IAAIC,OAAM,sCAAsC,KAC5DE,OAAM,CAAIC,aAAcC,EAAAC,UAAUC,aAAaE,WAIhDC,EAAQ,CACfC,aAAY,GACZC,aAAY,OACZC,YAAY,EAEZC,cAAa,2BACbC,UAAS,CACLC,KAAI,gBAEEC,QAAO,wCAEkBC,MAAK,cAAmBA,MAAK,MAASC,KAAI,6CAI9DD,MAAK,cAAmBA,MAAK,WAAiBA,MAAK,0CAG7BA,MAAK,cAAmBA,MAAK,UAAaC,KAAI,qCAE9CD,MAAK,cAAmBA,MAAK,UAAaC,KAAI,2BAExDD,MAAK,kBAAqBC,KAAI,sCAGrDC,MAAK,yBAEWF,MAAK,kBAAqBC,KAAI,oBAG9CE,IAAG,sVAeWH,MAAK,YAAeC,KAAI,sBACnBD,MAAK,QAAaA,MAAK,YAAeC,KAAI,gBACjDD,MAAK,YAAeC,KAAI,UAEpCG,WAAU,4BAEKJ,MAAK,UAAaC,KAAI,cAErCI,QAAO,uCAEOL,MAAK,UAAaC,KAAI","sources":["node_modules/monaco-editor/esm/vs/basic-languages/xml/xml.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { languages } from '../fillers/monaco-editor-core.js';\r\nexport var conf = {\r\n    comments: {\r\n        blockComment: ['<!--', '-->']\r\n    },\r\n    brackets: [['<', '>']],\r\n    autoClosingPairs: [\r\n        { open: '<', close: '>' },\r\n        { open: \"'\", close: \"'\" },\r\n        { open: '\"', close: '\"' }\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '<', close: '>' },\r\n        { open: \"'\", close: \"'\" },\r\n        { open: '\"', close: '\"' }\r\n    ],\r\n    onEnterRules: [\r\n        {\r\n            beforeText: new RegExp(\"<([_:\\\\w][_:\\\\w-.\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\r\n            afterText: /^<\\/([_:\\w][_:\\w-.\\d]*)\\s*>$/i,\r\n            action: {\r\n                indentAction: languages.IndentAction.IndentOutdent\r\n            }\r\n        },\r\n        {\r\n            beforeText: new RegExp(\"<(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\r\n            action: { indentAction: languages.IndentAction.Indent }\r\n        }\r\n    ]\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.xml',\r\n    ignoreCase: true,\r\n    // Useful regular expressions\r\n    qualifiedName: /(?:[\\w\\.\\-]+:)?[\\w\\.\\-]+/,\r\n    tokenizer: {\r\n        root: [\r\n            [/[^<&]+/, ''],\r\n            { include: '@whitespace' },\r\n            // Standard opening tag\r\n            [/(<)(@qualifiedName)/, [{ token: 'delimiter' }, { token: 'tag', next: '@tag' }]],\r\n            // Standard closing tag\r\n            [\r\n                /(<\\/)(@qualifiedName)(\\s*)(>)/,\r\n                [{ token: 'delimiter' }, { token: 'tag' }, '', { token: 'delimiter' }]\r\n            ],\r\n            // Meta tags - instruction\r\n            [/(<\\?)(@qualifiedName)/, [{ token: 'delimiter' }, { token: 'metatag', next: '@tag' }]],\r\n            // Meta tags - declaration\r\n            [/(<\\!)(@qualifiedName)/, [{ token: 'delimiter' }, { token: 'metatag', next: '@tag' }]],\r\n            // CDATA\r\n            [/<\\!\\[CDATA\\[/, { token: 'delimiter.cdata', next: '@cdata' }],\r\n            [/&\\w+;/, 'string.escape']\r\n        ],\r\n        cdata: [\r\n            [/[^\\]]+/, ''],\r\n            [/\\]\\]>/, { token: 'delimiter.cdata', next: '@pop' }],\r\n            [/\\]/, '']\r\n        ],\r\n        tag: [\r\n            [/[ \\t\\r\\n]+/, ''],\r\n            [\r\n                /(@qualifiedName)(\\s*=\\s*)(\"[^\"]*\"|'[^']*')/,\r\n                ['attribute.name', '', 'attribute.value']\r\n            ],\r\n            [\r\n                /(@qualifiedName)(\\s*=\\s*)(\"[^\">?\\/]*|'[^'>?\\/]*)(?=[\\?\\/]\\>)/,\r\n                ['attribute.name', '', 'attribute.value']\r\n            ],\r\n            [\r\n                /(@qualifiedName)(\\s*=\\s*)(\"[^\">]*|'[^'>]*)/,\r\n                ['attribute.name', '', 'attribute.value']\r\n            ],\r\n            [/@qualifiedName/, 'attribute.name'],\r\n            [/\\?>/, { token: 'delimiter', next: '@pop' }],\r\n            [/(\\/)(>)/, [{ token: 'tag' }, { token: 'delimiter', next: '@pop' }]],\r\n            [/>/, { token: 'delimiter', next: '@pop' }]\r\n        ],\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, ''],\r\n            [/<!--/, { token: 'comment', next: '@comment' }]\r\n        ],\r\n        comment: [\r\n            [/[^<\\-]+/, 'comment.content'],\r\n            [/-->/, { token: 'comment', next: '@pop' }],\r\n            [/<!--/, 'comment.content.invalid'],\r\n            [/[<\\-]/, 'comment.content']\r\n        ]\r\n    }\r\n};\r\n"],"names":["$84928614d2865f05$export$5056e7a493e30728","comments","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","onEnterRules","beforeText","RegExp","afterText","action","indentAction","$12k65","languages","IndentAction","IndentOutdent","Indent","$84928614d2865f05$export$2b7f034382a4a3d1","defaultToken","tokenPostfix","ignoreCase","qualifiedName","tokenizer","root","include","token","next","cdata","tag","whitespace","comment"],"version":3,"file":"xml.6634c143.js.map"}